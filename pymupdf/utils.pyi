import mupdf as mupdf
import pymupdf as pymupdf
import typing
from _typeshed import Incomplete

g_exceptions_verbose: Incomplete
point_like: str
rect_like: str
matrix_like: str
quad_like: str
AnyType: Incomplete
OptInt = int | None
OptFloat = float | None
OptStr = str | None
OptDict = dict | None
OptBytes: Incomplete
OptSeq = typing.Sequence | None

def write_text(page: pymupdf.Page, rect: Incomplete | None = None, writers: Incomplete | None = None, overlay: bool = True, color: Incomplete | None = None, opacity: Incomplete | None = None, keep_proportion: bool = True, rotate: int = 0, oc: int = 0) -> None: ...
def show_pdf_page(page, rect, src, pno: int = 0, keep_proportion: bool = True, overlay: bool = True, oc: int = 0, rotate: int = 0, clip: Incomplete | None = None) -> int: ...
def replace_image(page: pymupdf.Page, xref: int, *, filename: Incomplete | None = None, pixmap: Incomplete | None = None, stream: Incomplete | None = None): ...
def delete_image(page: pymupdf.Page, xref: int): ...
def insert_image(page, rect, *, alpha: int = -1, filename: Incomplete | None = None, height: int = 0, keep_proportion: bool = True, mask: Incomplete | None = None, oc: int = 0, overlay: bool = True, pixmap: Incomplete | None = None, rotate: int = 0, stream: Incomplete | None = None, width: int = 0, xref: int = 0): ...
def search_for(page, text, *, clip: Incomplete | None = None, quads: bool = False, flags=..., textpage: Incomplete | None = None) -> list: ...
def search_page_for(doc: pymupdf.Document, pno: int, text: str, quads: bool = False, clip: rect_like = None, flags: int = ..., textpage: pymupdf.TextPage = None) -> list: ...
def get_text_blocks(page: pymupdf.Page, clip: rect_like = None, flags: OptInt = None, textpage: pymupdf.TextPage = None, sort: bool = False) -> list: ...
def get_text_words(page: pymupdf.Page, clip: rect_like = None, flags: OptInt = None, textpage: pymupdf.TextPage = None, sort: bool = False, delimiters: Incomplete | None = None, tolerance: int = 3) -> list: ...
def get_sorted_text(page: pymupdf.Page, clip: rect_like = None, flags: OptInt = None, textpage: pymupdf.TextPage = None, tolerance: int = 3) -> str: ...
def get_textbox(page: pymupdf.Page, rect: rect_like, textpage: pymupdf.TextPage = None) -> str: ...
def get_text_selection(page: pymupdf.Page, p1: point_like, p2: point_like, clip: rect_like = None, textpage: pymupdf.TextPage = None): ...
def get_textpage_ocr(page: pymupdf.Page, flags: int = 0, language: str = 'eng', dpi: int = 72, full: bool = False, tessdata: str = None) -> pymupdf.TextPage: ...
def get_image_info(page: pymupdf.Page, hashes: bool = False, xrefs: bool = False) -> list: ...
def get_image_rects(page: pymupdf.Page, name, transform: bool = False) -> list: ...
def get_text(page: pymupdf.Page, option: str = 'text', clip: rect_like = None, flags: OptInt = None, textpage: pymupdf.TextPage = None, sort: bool = False, delimiters: Incomplete | None = None, tolerance: int = 3): ...
def get_page_text(doc: pymupdf.Document, pno: int, option: str = 'text', clip: rect_like = None, flags: OptInt = None, textpage: pymupdf.TextPage = None, sort: bool = False) -> typing.Any: ...
def get_pixmap(page: pymupdf.Page, *, matrix: matrix_like = ..., dpi: Incomplete | None = None, colorspace: pymupdf.Colorspace = ..., clip: rect_like = None, alpha: bool = False, annots: bool = True) -> pymupdf.Pixmap: ...
def get_page_pixmap(doc: pymupdf.Document, pno: int, *, matrix: matrix_like = ..., dpi: Incomplete | None = None, colorspace: pymupdf.Colorspace = ..., clip: rect_like = None, alpha: bool = False, annots: bool = True) -> pymupdf.Pixmap: ...
def getLinkDict(ln, document: Incomplete | None = None) -> dict: ...
def get_links(page: pymupdf.Page) -> list: ...
def get_toc(doc: pymupdf.Document, simple: bool = True) -> list: ...
def del_toc_item(doc: pymupdf.Document, idx: int) -> None: ...
def set_toc_item(doc: pymupdf.Document, idx: int, dest_dict: OptDict = None, kind: OptInt = None, pno: OptInt = None, uri: OptStr = None, title: OptStr = None, to: point_like = None, filename: OptStr = None, zoom: float = 0) -> None: ...
def get_area(*args) -> float: ...
def set_metadata(doc: pymupdf.Document, m: dict = None) -> None: ...
def getDestStr(xref: int, ddict: dict) -> str: ...
def set_toc(doc: pymupdf.Document, toc: list, collapse: int = 1) -> int: ...
def do_widgets(tar: pymupdf.Document, src: pymupdf.Document, graftmap, from_page: int = -1, to_page: int = -1, start_at: int = -1, join_duplicates: int = 0) -> None: ...
def do_links(doc1: pymupdf.Document, doc2: pymupdf.Document, from_page: int = -1, to_page: int = -1, start_at: int = -1) -> None: ...
def getLinkText(page: pymupdf.Page, lnk: dict) -> str: ...
def delete_widget(page: pymupdf.Page, widget: pymupdf.Widget) -> pymupdf.Widget: ...
def update_link(page: pymupdf.Page, lnk: dict) -> None: ...
def insert_link(page: pymupdf.Page, lnk: dict, mark: bool = True) -> None: ...
def insert_textbox(page: pymupdf.Page, rect: rect_like, buffer: str | list, *, fontname: str = 'helv', fontfile: OptStr = None, set_simple: int = 0, encoding: int = 0, fontsize: float = 11, lineheight: OptFloat = None, color: OptSeq = None, fill: OptSeq = None, expandtabs: int = 1, align: int = 0, rotate: int = 0, render_mode: int = 0, miter_limit: float = 1, border_width: float = 0.05, morph: OptSeq = None, overlay: bool = True, stroke_opacity: float = 1, fill_opacity: float = 1, oc: int = 0) -> float: ...
def insert_text(page: pymupdf.Page, point: point_like, text: str | list, *, fontsize: float = 11, lineheight: OptFloat = None, fontname: str = 'helv', fontfile: OptStr = None, set_simple: int = 0, encoding: int = 0, color: OptSeq = None, fill: OptSeq = None, border_width: float = 0.05, miter_limit: float = 1, render_mode: int = 0, rotate: int = 0, morph: OptSeq = None, overlay: bool = True, stroke_opacity: float = 1, fill_opacity: float = 1, oc: int = 0): ...
def insert_htmlbox(page, rect, text, *, css: Incomplete | None = None, scale_low: int = 0, archive: Incomplete | None = None, rotate: int = 0, oc: int = 0, opacity: int = 1, overlay: bool = True) -> float: ...
def new_page(doc: pymupdf.Document, pno: int = -1, width: float = 595, height: float = 842) -> pymupdf.Page: ...
def insert_page(doc: pymupdf.Document, pno: int, text: str | list | None = None, fontsize: float = 11, width: float = 595, height: float = 842, fontname: str = 'helv', fontfile: OptStr = None, color: OptSeq = (0,)) -> int: ...
def draw_line(page: pymupdf.Page, p1: point_like, p2: point_like, color: OptSeq = (0,), dashes: OptStr = None, width: float = 1, lineCap: int = 0, lineJoin: int = 0, overlay: bool = True, morph: OptSeq = None, stroke_opacity: float = 1, fill_opacity: float = 1, oc: int = 0) -> pymupdf.Point: ...
def draw_squiggle(page: pymupdf.Page, p1: point_like, p2: point_like, breadth: float = 2, color: OptSeq = (0,), dashes: OptStr = None, width: float = 1, lineCap: int = 0, lineJoin: int = 0, overlay: bool = True, morph: OptSeq = None, stroke_opacity: float = 1, fill_opacity: float = 1, oc: int = 0) -> pymupdf.Point: ...
def draw_zigzag(page: pymupdf.Page, p1: point_like, p2: point_like, breadth: float = 2, color: OptSeq = (0,), dashes: OptStr = None, width: float = 1, lineCap: int = 0, lineJoin: int = 0, overlay: bool = True, morph: OptSeq = None, stroke_opacity: float = 1, fill_opacity: float = 1, oc: int = 0) -> pymupdf.Point: ...
def draw_rect(page: pymupdf.Page, rect: rect_like, color: OptSeq = (0,), fill: OptSeq = None, dashes: OptStr = None, width: float = 1, lineCap: int = 0, lineJoin: int = 0, morph: OptSeq = None, overlay: bool = True, stroke_opacity: float = 1, fill_opacity: float = 1, oc: int = 0, radius: Incomplete | None = None) -> pymupdf.Point: ...
def draw_quad(page: pymupdf.Page, quad: quad_like, color: OptSeq = (0,), fill: OptSeq = None, dashes: OptStr = None, width: float = 1, lineCap: int = 0, lineJoin: int = 0, morph: OptSeq = None, overlay: bool = True, stroke_opacity: float = 1, fill_opacity: float = 1, oc: int = 0) -> pymupdf.Point: ...
def draw_polyline(page: pymupdf.Page, points: list, color: OptSeq = (0,), fill: OptSeq = None, dashes: OptStr = None, width: float = 1, morph: OptSeq = None, lineCap: int = 0, lineJoin: int = 0, overlay: bool = True, closePath: bool = False, stroke_opacity: float = 1, fill_opacity: float = 1, oc: int = 0) -> pymupdf.Point: ...
def draw_circle(page: pymupdf.Page, center: point_like, radius: float, color: OptSeq = (0,), fill: OptSeq = None, morph: OptSeq = None, dashes: OptStr = None, width: float = 1, lineCap: int = 0, lineJoin: int = 0, overlay: bool = True, stroke_opacity: float = 1, fill_opacity: float = 1, oc: int = 0) -> pymupdf.Point: ...
def draw_oval(page: pymupdf.Page, rect: rect_like | quad_like, color: OptSeq = (0,), fill: OptSeq = None, dashes: OptStr = None, morph: OptSeq = None, width: float = 1, lineCap: int = 0, lineJoin: int = 0, overlay: bool = True, stroke_opacity: float = 1, fill_opacity: float = 1, oc: int = 0) -> pymupdf.Point: ...
def draw_curve(page: pymupdf.Page, p1: point_like, p2: point_like, p3: point_like, color: OptSeq = (0,), fill: OptSeq = None, dashes: OptStr = None, width: float = 1, morph: OptSeq = None, closePath: bool = False, lineCap: int = 0, lineJoin: int = 0, overlay: bool = True, stroke_opacity: float = 1, fill_opacity: float = 1, oc: int = 0) -> pymupdf.Point: ...
def draw_bezier(page: pymupdf.Page, p1: point_like, p2: point_like, p3: point_like, p4: point_like, color: OptSeq = (0,), fill: OptSeq = None, dashes: OptStr = None, width: float = 1, morph: OptStr = None, closePath: bool = False, lineCap: int = 0, lineJoin: int = 0, overlay: bool = True, stroke_opacity: float = 1, fill_opacity: float = 1, oc: int = 0) -> pymupdf.Point: ...
def draw_sector(page: pymupdf.Page, center: point_like, point: point_like, beta: float, color: OptSeq = (0,), fill: OptSeq = None, dashes: OptStr = None, fullSector: bool = True, morph: OptSeq = None, width: float = 1, closePath: bool = False, lineCap: int = 0, lineJoin: int = 0, overlay: bool = True, stroke_opacity: float = 1, fill_opacity: float = 1, oc: int = 0) -> pymupdf.Point: ...
def getColorList() -> list: ...
def getColorInfoList() -> list: ...
def getColor(name: str) -> tuple: ...
def getColorHSV(name: str) -> tuple: ...
def get_char_widths(doc: pymupdf.Document, xref: int, limit: int = 256, idx: int = 0, fontdict: OptDict = None) -> list: ...

class Shape:
    @staticmethod
    def horizontal_angle(C, P): ...
    page: Incomplete
    doc: Incomplete
    height: Incomplete
    width: Incomplete
    x: Incomplete
    y: Incomplete
    pctm: Incomplete
    ipctm: Incomplete
    draw_cont: str
    text_cont: str
    totalcont: str
    last_point: Incomplete
    rect: Incomplete
    def __init__(self, page: pymupdf.Page) -> None: ...
    def updateRect(self, x) -> None: ...
    def draw_line(self, p1: point_like, p2: point_like) -> pymupdf.Point: ...
    def draw_polyline(self, points: list) -> pymupdf.Point: ...
    def draw_bezier(self, p1: point_like, p2: point_like, p3: point_like, p4: point_like) -> pymupdf.Point: ...
    def draw_oval(self, tetra: quad_like | rect_like) -> pymupdf.Point: ...
    def draw_circle(self, center: point_like, radius: float) -> pymupdf.Point: ...
    def draw_curve(self, p1: point_like, p2: point_like, p3: point_like) -> pymupdf.Point: ...
    def draw_sector(self, center: point_like, point: point_like, beta: float, fullSector: bool = True) -> pymupdf.Point: ...
    def draw_rect(self, rect: rect_like, *, radius: Incomplete | None = None) -> pymupdf.Point: ...
    def draw_quad(self, quad: quad_like) -> pymupdf.Point: ...
    def draw_zigzag(self, p1: point_like, p2: point_like, breadth: float = 2) -> pymupdf.Point: ...
    def draw_squiggle(self, p1: point_like, p2: point_like, breadth: int = 2) -> pymupdf.Point: ...
    def insert_text(self, point: point_like, buffer: str | list, *, fontsize: float = 11, lineheight: OptFloat = None, fontname: str = 'helv', fontfile: OptStr = None, set_simple: bool = 0, encoding: int = 0, color: OptSeq = None, fill: OptSeq = None, render_mode: int = 0, border_width: float = 0.05, miter_limit: float = 1, rotate: int = 0, morph: OptSeq = None, stroke_opacity: float = 1, fill_opacity: float = 1, oc: int = 0) -> int: ...
    def insert_textbox(self, rect: rect_like, buffer: str | list, *, fontname: OptStr = 'helv', fontfile: OptStr = None, fontsize: float = 11, lineheight: OptFloat = None, set_simple: bool = 0, encoding: int = 0, color: OptSeq = None, fill: OptSeq = None, expandtabs: int = 1, border_width: float = 0.05, miter_limit: float = 1, align: int = 0, render_mode: int = 0, rotate: int = 0, morph: OptSeq = None, stroke_opacity: float = 1, fill_opacity: float = 1, oc: int = 0) -> float: ...
    def finish(self, width: float = 1, color: OptSeq = (0,), fill: OptSeq = None, lineCap: int = 0, lineJoin: int = 0, dashes: OptStr = None, even_odd: bool = False, morph: OptSeq = None, closePath: bool = True, fill_opacity: float = 1, stroke_opacity: float = 1, oc: int = 0) -> None: ...
    def commit(self, overlay: bool = True) -> None: ...

def apply_redactions(page: pymupdf.Page, images: int = 2, graphics: int = 1, text: int = 0) -> bool: ...
def scrub(doc: pymupdf.Document, attached_files: bool = True, clean_pages: bool = True, embedded_files: bool = True, hidden_text: bool = True, javascript: bool = True, metadata: bool = True, redactions: bool = True, redact_images: int = 0, remove_links: bool = True, reset_fields: bool = True, reset_responses: bool = True, thumbnails: bool = True, xml_metadata: bool = True) -> None: ...
def fill_textbox(writer: pymupdf.TextWriter, rect: rect_like, text: str | list, pos: point_like = None, font: pymupdf.Font | None = None, fontsize: float = 11, lineheight: OptFloat = None, align: int = 0, warn: bool = None, right_to_left: bool = False, small_caps: bool = False) -> tuple: ...
def get_oc(doc: pymupdf.Document, xref: int) -> int: ...
def set_oc(doc: pymupdf.Document, xref: int, oc: int) -> None: ...
def set_ocmd(doc: pymupdf.Document, xref: int = 0, ocgs: list | None = None, policy: OptStr = None, ve: list | None = None) -> int: ...
def get_ocmd(doc: pymupdf.Document, xref: int) -> dict: ...
def rule_dict(item): ...
def get_label_pno(pgNo, labels): ...
def get_label(page): ...
def get_page_numbers(doc, label, only_one: bool = False): ...
def construct_label(style, prefix, pno) -> str: ...
def integerToLetter(i) -> str: ...
def integerToRoman(num: int) -> str: ...
def get_page_labels(doc): ...
def set_page_labels(doc, labels): ...
def has_links(doc: pymupdf.Document) -> bool: ...
def has_annots(doc: pymupdf.Document) -> bool: ...
def recover_bbox_quad(line_dir: tuple, span: dict, bbox: tuple) -> pymupdf.Quad: ...
def recover_quad(line_dir: tuple, span: dict) -> pymupdf.Quad: ...
def recover_line_quad(line: dict, spans: list = None) -> pymupdf.Quad: ...
def recover_span_quad(line_dir: tuple, span: dict, chars: list = None) -> pymupdf.Quad: ...
def recover_char_quad(line_dir: tuple, span: dict, char: dict) -> pymupdf.Quad: ...
def subset_fonts(doc: pymupdf.Document, verbose: bool = False, fallback: bool = False) -> OptInt: ...
def xref_copy(doc: pymupdf.Document, source: int, target: int, *, keep: list = None) -> None: ...
