from _typeshed import Incomplete
from google.cloud.bigquery.encryption_configuration import EncryptionConfiguration as EncryptionConfiguration
from google.cloud.bigquery.external_config import HivePartitioningOptions as HivePartitioningOptions
from google.cloud.bigquery.format_options import ParquetOptions as ParquetOptions
from google.cloud.bigquery.job.base import _AsyncJob, _JobConfig
from google.cloud.bigquery.query import ConnectionProperty as ConnectionProperty
from google.cloud.bigquery.schema import SchemaField as SchemaField
from google.cloud.bigquery.table import RangePartitioning as RangePartitioning, TableReference as TableReference, TimePartitioning as TimePartitioning
from typing import Iterable

class ColumnNameCharacterMap:
    COLUMN_NAME_CHARACTER_MAP_UNSPECIFIED: str
    STRICT: str
    V1: str
    V2: str

class LoadJobConfig(_JobConfig):
    def __init__(self, **kwargs) -> None: ...
    @property
    def allow_jagged_rows(self): ...
    @allow_jagged_rows.setter
    def allow_jagged_rows(self, value) -> None: ...
    @property
    def allow_quoted_newlines(self): ...
    @allow_quoted_newlines.setter
    def allow_quoted_newlines(self, value) -> None: ...
    @property
    def autodetect(self): ...
    @autodetect.setter
    def autodetect(self, value) -> None: ...
    @property
    def clustering_fields(self): ...
    @clustering_fields.setter
    def clustering_fields(self, value) -> None: ...
    @property
    def connection_properties(self) -> list[ConnectionProperty]: ...
    @connection_properties.setter
    def connection_properties(self, value: Iterable[ConnectionProperty]): ...
    @property
    def create_disposition(self): ...
    @create_disposition.setter
    def create_disposition(self, value) -> None: ...
    @property
    def create_session(self) -> bool | None: ...
    @create_session.setter
    def create_session(self, value: bool | None): ...
    @property
    def decimal_target_types(self) -> frozenset[str] | None: ...
    @decimal_target_types.setter
    def decimal_target_types(self, value: Iterable[str] | None): ...
    @property
    def destination_encryption_configuration(self): ...
    @destination_encryption_configuration.setter
    def destination_encryption_configuration(self, value) -> None: ...
    @property
    def destination_table_description(self): ...
    @destination_table_description.setter
    def destination_table_description(self, value) -> None: ...
    @property
    def destination_table_friendly_name(self): ...
    @destination_table_friendly_name.setter
    def destination_table_friendly_name(self, value) -> None: ...
    @property
    def encoding(self): ...
    @encoding.setter
    def encoding(self, value) -> None: ...
    @property
    def field_delimiter(self): ...
    @field_delimiter.setter
    def field_delimiter(self, value) -> None: ...
    @property
    def hive_partitioning(self): ...
    @hive_partitioning.setter
    def hive_partitioning(self, value) -> None: ...
    @property
    def ignore_unknown_values(self): ...
    @ignore_unknown_values.setter
    def ignore_unknown_values(self, value) -> None: ...
    @property
    def json_extension(self): ...
    @json_extension.setter
    def json_extension(self, value) -> None: ...
    @property
    def max_bad_records(self): ...
    @max_bad_records.setter
    def max_bad_records(self, value) -> None: ...
    @property
    def null_marker(self): ...
    @null_marker.setter
    def null_marker(self, value) -> None: ...
    @property
    def preserve_ascii_control_characters(self): ...
    @preserve_ascii_control_characters.setter
    def preserve_ascii_control_characters(self, value) -> None: ...
    @property
    def projection_fields(self) -> list[str] | None: ...
    @projection_fields.setter
    def projection_fields(self, value: list[str] | None): ...
    @property
    def quote_character(self): ...
    @quote_character.setter
    def quote_character(self, value) -> None: ...
    @property
    def range_partitioning(self): ...
    @range_partitioning.setter
    def range_partitioning(self, value) -> None: ...
    @property
    def reference_file_schema_uri(self): ...
    @reference_file_schema_uri.setter
    def reference_file_schema_uri(self, value): ...
    @property
    def schema(self): ...
    @schema.setter
    def schema(self, value) -> None: ...
    @property
    def schema_update_options(self): ...
    @schema_update_options.setter
    def schema_update_options(self, values) -> None: ...
    @property
    def skip_leading_rows(self): ...
    @skip_leading_rows.setter
    def skip_leading_rows(self, value) -> None: ...
    @property
    def source_format(self): ...
    @source_format.setter
    def source_format(self, value) -> None: ...
    @property
    def time_partitioning(self): ...
    @time_partitioning.setter
    def time_partitioning(self, value) -> None: ...
    @property
    def use_avro_logical_types(self): ...
    @use_avro_logical_types.setter
    def use_avro_logical_types(self, value) -> None: ...
    @property
    def write_disposition(self): ...
    @write_disposition.setter
    def write_disposition(self, value) -> None: ...
    @property
    def parquet_options(self): ...
    @parquet_options.setter
    def parquet_options(self, value) -> None: ...
    @property
    def column_name_character_map(self) -> str: ...
    @column_name_character_map.setter
    def column_name_character_map(self, value: str | None): ...

class LoadJob(_AsyncJob):
    def __init__(self, job_id, source_uris, destination, client, job_config: Incomplete | None = None) -> None: ...
    @property
    def configuration(self) -> LoadJobConfig: ...
    @property
    def destination(self): ...
    @property
    def source_uris(self): ...
    @property
    def allow_jagged_rows(self): ...
    @property
    def allow_quoted_newlines(self): ...
    @property
    def autodetect(self): ...
    @property
    def connection_properties(self) -> list[ConnectionProperty]: ...
    @property
    def create_disposition(self): ...
    @property
    def create_session(self) -> bool | None: ...
    @property
    def encoding(self): ...
    @property
    def field_delimiter(self): ...
    @property
    def ignore_unknown_values(self): ...
    @property
    def max_bad_records(self): ...
    @property
    def null_marker(self): ...
    @property
    def quote_character(self): ...
    @property
    def reference_file_schema_uri(self): ...
    @property
    def skip_leading_rows(self): ...
    @property
    def source_format(self): ...
    @property
    def write_disposition(self): ...
    @property
    def schema(self): ...
    @property
    def destination_encryption_configuration(self): ...
    @property
    def destination_table_description(self): ...
    @property
    def destination_table_friendly_name(self): ...
    @property
    def range_partitioning(self): ...
    @property
    def time_partitioning(self): ...
    @property
    def use_avro_logical_types(self): ...
    @property
    def clustering_fields(self): ...
    @property
    def schema_update_options(self): ...
    @property
    def input_file_bytes(self): ...
    @property
    def input_files(self): ...
    @property
    def output_bytes(self): ...
    @property
    def output_rows(self): ...
    def to_api_repr(self): ...
    @classmethod
    def from_api_repr(cls, resource: dict, client) -> LoadJob: ...
