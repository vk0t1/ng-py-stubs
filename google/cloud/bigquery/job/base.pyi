import google.api_core.future.polling
import typing
from _typeshed import Incomplete
from google.api_core import exceptions as exceptions, retry as retries
from google.cloud.bigquery.retry import DEFAULT_GET_JOB_TIMEOUT as DEFAULT_GET_JOB_TIMEOUT, DEFAULT_RETRY as DEFAULT_RETRY
from typing import NamedTuple, Sequence

class ReservationUsage(NamedTuple):
    name: Incomplete
    slot_ms: Incomplete

class TransactionInfo(typing.NamedTuple):
    transaction_id: str
    @classmethod
    def from_api_repr(cls, transaction_info: dict[str, str]) -> TransactionInfo: ...

class _JobReference:
    def __init__(self, job_id, project, location) -> None: ...
    @property
    def job_id(self): ...
    @property
    def project(self): ...
    @property
    def location(self): ...

class _JobConfig:
    def __init__(self, job_type, **kwargs) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    @property
    def job_timeout_ms(self): ...
    @job_timeout_ms.setter
    def job_timeout_ms(self, value) -> None: ...
    @property
    def labels(self): ...
    @labels.setter
    def labels(self, value) -> None: ...
    def to_api_repr(self) -> dict: ...
    @classmethod
    def from_api_repr(cls, resource: dict) -> _JobConfig: ...

class _AsyncJob(google.api_core.future.polling.PollingFuture):
    def __init__(self, job_id, client) -> None: ...
    @property
    def configuration(self) -> _JobConfig: ...
    @property
    def job_id(self): ...
    @property
    def parent_job_id(self): ...
    @property
    def script_statistics(self) -> ScriptStatistics | None: ...
    @property
    def session_info(self) -> SessionInfo | None: ...
    @property
    def num_child_jobs(self): ...
    @property
    def project(self): ...
    @property
    def location(self): ...
    @property
    def job_type(self): ...
    @property
    def path(self): ...
    @property
    def labels(self): ...
    @property
    def etag(self): ...
    @property
    def self_link(self): ...
    @property
    def user_email(self): ...
    @property
    def created(self): ...
    @property
    def started(self): ...
    @property
    def ended(self): ...
    @property
    def reservation_usage(self): ...
    @property
    def transaction_info(self) -> TransactionInfo | None: ...
    @property
    def error_result(self): ...
    @property
    def errors(self): ...
    @property
    def state(self): ...
    def to_api_repr(self): ...
    def exists(self, client: Incomplete | None = None, retry: retries.Retry = ..., timeout: float | None = None) -> bool: ...
    def reload(self, client: Incomplete | None = None, retry: retries.Retry = ..., timeout: float | None = ...): ...
    def cancel(self, client: Incomplete | None = None, retry: retries.Retry | None = ..., timeout: float | None = None) -> bool: ...
    def done(self, retry: retries.Retry = ..., timeout: float | None = ..., reload: bool = True) -> bool: ...
    def result(self, retry: retries.Retry | None = ..., timeout: float | None = None) -> _AsyncJob: ...
    def cancelled(self): ...

class ScriptStackFrame:
    def __init__(self, resource) -> None: ...
    @property
    def procedure_id(self): ...
    @property
    def text(self): ...
    @property
    def start_line(self): ...
    @property
    def start_column(self): ...
    @property
    def end_line(self): ...
    @property
    def end_column(self): ...

class ScriptStatistics:
    def __init__(self, resource) -> None: ...
    @property
    def stack_frames(self) -> Sequence[ScriptStackFrame]: ...
    @property
    def evaluation_kind(self) -> str | None: ...

class SessionInfo:
    def __init__(self, resource) -> None: ...
    @property
    def session_id(self) -> str | None: ...

class UnknownJob(_AsyncJob):
    @classmethod
    def from_api_repr(cls, resource: dict, client) -> UnknownJob: ...
