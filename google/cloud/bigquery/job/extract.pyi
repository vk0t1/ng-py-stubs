from _typeshed import Incomplete
from google.cloud.bigquery.job.base import _AsyncJob, _JobConfig
from google.cloud.bigquery.model import ModelReference as ModelReference
from google.cloud.bigquery.table import Table as Table
from google.cloud.bigquery.table import TableListItem as TableListItem
from google.cloud.bigquery.table import TableReference as TableReference

class ExtractJobConfig(_JobConfig):
    def __init__(self, **kwargs) -> None: ...
    @property
    def compression(self): ...
    @compression.setter
    def compression(self, value) -> None: ...
    @property
    def destination_format(self): ...
    @destination_format.setter
    def destination_format(self, value) -> None: ...
    @property
    def field_delimiter(self): ...
    @field_delimiter.setter
    def field_delimiter(self, value) -> None: ...
    @property
    def print_header(self): ...
    @print_header.setter
    def print_header(self, value) -> None: ...
    @property
    def use_avro_logical_types(self): ...
    @use_avro_logical_types.setter
    def use_avro_logical_types(self, value) -> None: ...

class ExtractJob(_AsyncJob):
    def __init__(self, job_id, source, destination_uris, client, job_config: Incomplete | None = None) -> None: ...
    @property
    def configuration(self) -> ExtractJobConfig: ...
    @property
    def source(self): ...
    @property
    def destination_uris(self): ...
    @property
    def compression(self): ...
    @property
    def destination_format(self): ...
    @property
    def field_delimiter(self): ...
    @property
    def print_header(self): ...
    @property
    def destination_uri_file_counts(self): ...
    def to_api_repr(self): ...
    @classmethod
    def from_api_repr(cls, resource: dict, client) -> ExtractJob: ...
