import enum
from typing import Any, Iterable

from _typeshed import Incomplete
from google.cloud.bigquery import enums as enums
from google.cloud.bigquery import standard_sql as standard_sql
from google.cloud.bigquery.enums import StandardSqlTypeNames as StandardSqlTypeNames

LEGACY_TO_STANDARD_TYPES: Incomplete

class _DefaultSentinel(enum.Enum):
    DEFAULT_VALUE = ...

class FieldElementType:
    def __init__(self, element_type: str) -> None: ...
    @property
    def element_type(self): ...
    @classmethod
    def from_api_repr(cls, api_repr: dict | None) -> FieldElementType | None: ...
    def to_api_repr(self) -> dict: ...

class SchemaField:
    def __init__(
        self,
        name: str,
        field_type: str,
        mode: str = "NULLABLE",
        default_value_expression: str | None = None,
        description: str | _DefaultSentinel = ...,
        fields: Iterable["SchemaField"] = (),
        policy_tags: PolicyTagList | None | _DefaultSentinel = ...,
        precision: int | _DefaultSentinel = ...,
        scale: int | _DefaultSentinel = ...,
        max_length: int | _DefaultSentinel = ...,
        range_element_type: FieldElementType | str | None = None,
        rounding_mode: enums.RoundingMode | str | None = None,
        foreign_type_definition: str | None = None,
    ) -> None: ...
    @classmethod
    def from_api_repr(cls, api_repr: dict) -> SchemaField: ...
    @property
    def name(self): ...
    @property
    def field_type(self): ...
    @property
    def mode(self): ...
    @property
    def is_nullable(self): ...
    @property
    def default_value_expression(self): ...
    @property
    def description(self): ...
    @property
    def precision(self): ...
    @property
    def scale(self): ...
    @property
    def max_length(self): ...
    @property
    def range_element_type(self): ...
    @property
    def rounding_mode(self): ...
    @property
    def foreign_type_definition(self): ...
    @property
    def fields(self): ...
    @property
    def policy_tags(self): ...
    def to_api_repr(self) -> dict: ...
    def to_standard_sql(self) -> standard_sql.StandardSqlField: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __hash__(self): ...

class PolicyTagList:
    def __init__(self, names: Iterable[str] = ()) -> None: ...
    @property
    def names(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __hash__(self): ...
    @classmethod
    def from_api_repr(cls, api_repr: dict) -> PolicyTagList: ...
    def to_api_repr(self) -> dict: ...

class ForeignTypeInfo:
    def __init__(self, type_system: str | None = None) -> None: ...
    @property
    def type_system(self) -> str | None: ...
    @type_system.setter
    def type_system(self, value: str | None): ...
    def to_api_repr(self) -> dict: ...
    @classmethod
    def from_api_repr(cls, api_repr: dict[str, Any]) -> ForeignTypeInfo: ...

class SerDeInfo:
    def __init__(
        self, serialization_library: str, name: str | None = None, parameters: dict[str, str] | None = None
    ) -> None: ...
    @property
    def serialization_library(self) -> str: ...
    @serialization_library.setter
    def serialization_library(self, value: str): ...
    @property
    def name(self) -> str | None: ...
    @name.setter
    def name(self, value: str | None = None): ...
    @property
    def parameters(self) -> dict[str, str] | None: ...
    @parameters.setter
    def parameters(self, value: dict[str, str] | None = None): ...
    def to_api_repr(self) -> dict: ...
    @classmethod
    def from_api_repr(cls, api_repr: dict) -> SerDeInfo: ...

class StorageDescriptor:
    def __init__(
        self,
        input_format: str | None = None,
        location_uri: str | None = None,
        output_format: str | None = None,
        serde_info: SerDeInfo | dict | None = None,
    ) -> None: ...
    @property
    def input_format(self) -> str | None: ...
    @input_format.setter
    def input_format(self, value: str | None): ...
    @property
    def location_uri(self) -> str | None: ...
    @location_uri.setter
    def location_uri(self, value: str | None): ...
    @property
    def output_format(self) -> str | None: ...
    @output_format.setter
    def output_format(self, value: str | None): ...
    @property
    def serde_info(self) -> SerDeInfo | None: ...
    @serde_info.setter
    def serde_info(self, value: SerDeInfo | dict | None): ...
    def to_api_repr(self) -> dict: ...
    @classmethod
    def from_api_repr(cls, resource: dict) -> StorageDescriptor: ...
