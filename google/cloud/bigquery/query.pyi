from _typeshed import Incomplete
from typing import Any

class ConnectionProperty:
    def __init__(self, key: str = '', value: str = '') -> None: ...
    @property
    def key(self) -> str: ...
    @property
    def value(self) -> str: ...
    @classmethod
    def from_api_repr(cls, resource) -> ConnectionProperty: ...
    def to_api_repr(self) -> dict[str, Any]: ...

class UDFResource:
    udf_type: Incomplete
    value: Incomplete
    def __init__(self, udf_type, value) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class _AbstractQueryParameterType:
    @classmethod
    def from_api_repr(cls, resource) -> None: ...
    def to_api_repr(self) -> None: ...

class ScalarQueryParameterType(_AbstractQueryParameterType):
    name: Incomplete
    description: Incomplete
    def __init__(self, type_, *, name: Incomplete | None = None, description: Incomplete | None = None) -> None: ...
    @classmethod
    def from_api_repr(cls, resource): ...
    def to_api_repr(self): ...
    def with_name(self, new_name: str | None): ...

class ArrayQueryParameterType(_AbstractQueryParameterType):
    name: Incomplete
    description: Incomplete
    def __init__(self, array_type, *, name: Incomplete | None = None, description: Incomplete | None = None) -> None: ...
    @classmethod
    def from_api_repr(cls, resource): ...
    def to_api_repr(self): ...

class StructQueryParameterType(_AbstractQueryParameterType):
    name: Incomplete
    description: Incomplete
    def __init__(self, *fields, name: Incomplete | None = None, description: Incomplete | None = None) -> None: ...
    @property
    def fields(self): ...
    @classmethod
    def from_api_repr(cls, resource): ...
    def to_api_repr(self): ...

class RangeQueryParameterType(_AbstractQueryParameterType):
    type_: Incomplete
    name: Incomplete
    description: Incomplete
    def __init__(self, type_, *, name: Incomplete | None = None, description: Incomplete | None = None) -> None: ...
    @classmethod
    def from_api_repr(cls, resource): ...
    def to_api_repr(self): ...
    def with_name(self, new_name: str | None): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class _AbstractQueryParameter:
    @classmethod
    def from_api_repr(cls, resource: dict) -> _AbstractQueryParameter: ...
    def to_api_repr(self) -> dict: ...

class ScalarQueryParameter(_AbstractQueryParameter):
    name: Incomplete
    type_: Incomplete
    value: Incomplete
    def __init__(self, name: str | None, type_: str | ScalarQueryParameterType | None, value: _SCALAR_VALUE_TYPE) -> None: ...
    @classmethod
    def positional(cls, type_: str | ScalarQueryParameterType, value: _SCALAR_VALUE_TYPE) -> ScalarQueryParameter: ...
    @classmethod
    def from_api_repr(cls, resource: dict) -> ScalarQueryParameter: ...
    def to_api_repr(self) -> dict: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class ArrayQueryParameter(_AbstractQueryParameter):
    name: Incomplete
    values: Incomplete
    array_type: Incomplete
    def __init__(self, name, array_type, values) -> None: ...
    @classmethod
    def positional(cls, array_type: str, values: list) -> ArrayQueryParameter: ...
    @classmethod
    def from_api_repr(cls, resource: dict) -> ArrayQueryParameter: ...
    def to_api_repr(self) -> dict: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class StructQueryParameter(_AbstractQueryParameter):
    name: Incomplete
    struct_types: dict[str, Any]
    struct_values: dict[str, Any]
    def __init__(self, name, *sub_params) -> None: ...
    @classmethod
    def positional(cls, *sub_params): ...
    @classmethod
    def from_api_repr(cls, resource: dict) -> StructQueryParameter: ...
    def to_api_repr(self) -> dict: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class RangeQueryParameter(_AbstractQueryParameter):
    name: Incomplete
    range_element_type: Incomplete
    start: Incomplete
    end: Incomplete
    def __init__(self, range_element_type, start: Incomplete | None = None, end: Incomplete | None = None, name: Incomplete | None = None) -> None: ...
    @classmethod
    def positional(cls, range_element_type, start: Incomplete | None = None, end: Incomplete | None = None) -> RangeQueryParameter: ...
    @classmethod
    def from_api_repr(cls, resource: dict) -> RangeQueryParameter: ...
    def to_api_repr(self) -> dict: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class SqlParameterScalarTypes:
    BOOL: Incomplete
    BOOLEAN: Incomplete
    BIGDECIMAL: Incomplete
    BIGNUMERIC: Incomplete
    BYTES: Incomplete
    DATE: Incomplete
    DATETIME: Incomplete
    DECIMAL: Incomplete
    FLOAT: Incomplete
    FLOAT64: Incomplete
    GEOGRAPHY: Incomplete
    INT64: Incomplete
    INTEGER: Incomplete
    NUMERIC: Incomplete
    STRING: Incomplete
    TIME: Incomplete
    TIMESTAMP: Incomplete

class _QueryResults:
    def __init__(self, properties) -> None: ...
    @classmethod
    def from_api_repr(cls, api_response): ...
    @property
    def project(self): ...
    @property
    def cache_hit(self): ...
    @property
    def complete(self): ...
    @property
    def errors(self): ...
    @property
    def job_id(self): ...
    @property
    def location(self): ...
    @property
    def query_id(self) -> str | None: ...
    @property
    def page_token(self): ...
    @property
    def total_rows(self): ...
    @property
    def total_bytes_processed(self): ...
    @property
    def num_dml_affected_rows(self): ...
    @property
    def rows(self): ...
    @property
    def schema(self): ...
