from typing import Any, Iterable

from google.cloud.bigquery import schema as schema
from google.cloud.bigquery.format_options import AvroOptions as AvroOptions
from google.cloud.bigquery.format_options import ParquetOptions as ParquetOptions
from google.cloud.bigquery.schema import SchemaField as SchemaField

class ExternalSourceFormat:
    CSV: str
    GOOGLE_SHEETS: str
    NEWLINE_DELIMITED_JSON: str
    AVRO: str
    DATASTORE_BACKUP: str
    ORC: str
    PARQUET: str
    BIGTABLE: str

class BigtableColumn:
    def __init__(self) -> None: ...
    @property
    def encoding(self): ...
    @encoding.setter
    def encoding(self, value) -> None: ...
    @property
    def field_name(self): ...
    @field_name.setter
    def field_name(self, value) -> None: ...
    @property
    def only_read_latest(self): ...
    @only_read_latest.setter
    def only_read_latest(self, value) -> None: ...
    @property
    def qualifier_encoded(self): ...
    @qualifier_encoded.setter
    def qualifier_encoded(self, value) -> None: ...
    @property
    def qualifier_string(self): ...
    @qualifier_string.setter
    def qualifier_string(self, value) -> None: ...
    @property
    def type_(self): ...
    @type_.setter
    def type_(self, value) -> None: ...
    def to_api_repr(self) -> dict: ...
    @classmethod
    def from_api_repr(cls, resource: dict) -> BigtableColumn: ...

class BigtableColumnFamily:
    def __init__(self) -> None: ...
    @property
    def encoding(self): ...
    @encoding.setter
    def encoding(self, value) -> None: ...
    @property
    def family_id(self): ...
    @family_id.setter
    def family_id(self, value) -> None: ...
    @property
    def only_read_latest(self): ...
    @only_read_latest.setter
    def only_read_latest(self, value) -> None: ...
    @property
    def type_(self): ...
    @type_.setter
    def type_(self, value) -> None: ...
    @property
    def columns(self): ...
    @columns.setter
    def columns(self, value) -> None: ...
    def to_api_repr(self) -> dict: ...
    @classmethod
    def from_api_repr(cls, resource: dict) -> BigtableColumnFamily: ...

class BigtableOptions:
    def __init__(self) -> None: ...
    @property
    def ignore_unspecified_column_families(self): ...
    @ignore_unspecified_column_families.setter
    def ignore_unspecified_column_families(self, value) -> None: ...
    @property
    def read_rowkey_as_string(self): ...
    @read_rowkey_as_string.setter
    def read_rowkey_as_string(self, value) -> None: ...
    @property
    def column_families(self): ...
    @column_families.setter
    def column_families(self, value) -> None: ...
    def to_api_repr(self) -> dict: ...
    @classmethod
    def from_api_repr(cls, resource: dict) -> BigtableOptions: ...

class CSVOptions:
    def __init__(self) -> None: ...
    @property
    def allow_jagged_rows(self): ...
    @allow_jagged_rows.setter
    def allow_jagged_rows(self, value) -> None: ...
    @property
    def allow_quoted_newlines(self): ...
    @allow_quoted_newlines.setter
    def allow_quoted_newlines(self, value) -> None: ...
    @property
    def encoding(self): ...
    @encoding.setter
    def encoding(self, value) -> None: ...
    @property
    def preserve_ascii_control_characters(self): ...
    @preserve_ascii_control_characters.setter
    def preserve_ascii_control_characters(self, value) -> None: ...
    @property
    def field_delimiter(self): ...
    @field_delimiter.setter
    def field_delimiter(self, value) -> None: ...
    @property
    def quote_character(self): ...
    @quote_character.setter
    def quote_character(self, value) -> None: ...
    @property
    def skip_leading_rows(self): ...
    @skip_leading_rows.setter
    def skip_leading_rows(self, value) -> None: ...
    def to_api_repr(self) -> dict: ...
    @classmethod
    def from_api_repr(cls, resource: dict) -> CSVOptions: ...

class GoogleSheetsOptions:
    def __init__(self) -> None: ...
    @property
    def skip_leading_rows(self): ...
    @skip_leading_rows.setter
    def skip_leading_rows(self, value) -> None: ...
    @property
    def range(self): ...
    @range.setter
    def range(self, value) -> None: ...
    def to_api_repr(self) -> dict: ...
    @classmethod
    def from_api_repr(cls, resource: dict) -> GoogleSheetsOptions: ...

OptionsType = AvroOptions | BigtableOptions | CSVOptions | GoogleSheetsOptions | ParquetOptions

class HivePartitioningOptions:
    def __init__(self) -> None: ...
    @property
    def mode(self): ...
    @mode.setter
    def mode(self, value) -> None: ...
    @property
    def source_uri_prefix(self): ...
    @source_uri_prefix.setter
    def source_uri_prefix(self, value) -> None: ...
    @property
    def require_partition_filter(self): ...
    @require_partition_filter.setter
    def require_partition_filter(self, value) -> None: ...
    def to_api_repr(self) -> dict: ...
    @classmethod
    def from_api_repr(cls, resource: dict) -> HivePartitioningOptions: ...

class ExternalConfig:
    def __init__(self, source_format) -> None: ...
    @property
    def source_format(self): ...
    @property
    def options(self) -> OptionsType | None: ...
    @property
    def autodetect(self): ...
    @autodetect.setter
    def autodetect(self, value) -> None: ...
    @property
    def compression(self): ...
    @compression.setter
    def compression(self, value) -> None: ...
    @property
    def decimal_target_types(self) -> frozenset[str] | None: ...
    @decimal_target_types.setter
    def decimal_target_types(self, value: Iterable[str] | None): ...
    @property
    def hive_partitioning(self): ...
    @hive_partitioning.setter
    def hive_partitioning(self, value) -> None: ...
    @property
    def reference_file_schema_uri(self): ...
    @reference_file_schema_uri.setter
    def reference_file_schema_uri(self, value) -> None: ...
    @property
    def ignore_unknown_values(self): ...
    @ignore_unknown_values.setter
    def ignore_unknown_values(self, value) -> None: ...
    @property
    def max_bad_records(self): ...
    @max_bad_records.setter
    def max_bad_records(self, value) -> None: ...
    @property
    def source_uris(self): ...
    @source_uris.setter
    def source_uris(self, value) -> None: ...
    @property
    def schema(self): ...
    @schema.setter
    def schema(self, value) -> None: ...
    @property
    def connection_id(self): ...
    @connection_id.setter
    def connection_id(self, value) -> None: ...
    @property
    def avro_options(self) -> AvroOptions | None: ...
    @avro_options.setter
    def avro_options(self, value) -> None: ...
    @property
    def bigtable_options(self) -> BigtableOptions | None: ...
    @bigtable_options.setter
    def bigtable_options(self, value) -> None: ...
    @property
    def csv_options(self) -> CSVOptions | None: ...
    @csv_options.setter
    def csv_options(self, value) -> None: ...
    @property
    def google_sheets_options(self) -> GoogleSheetsOptions | None: ...
    @google_sheets_options.setter
    def google_sheets_options(self, value) -> None: ...
    @property
    def parquet_options(self) -> ParquetOptions | None: ...
    @parquet_options.setter
    def parquet_options(self, value) -> None: ...
    def to_api_repr(self) -> dict: ...
    @classmethod
    def from_api_repr(cls, resource: dict) -> ExternalConfig: ...

class ExternalCatalogDatasetOptions:
    def __init__(
        self, default_storage_location_uri: str | None = None, parameters: dict[str, Any] | None = None
    ) -> None: ...
    @property
    def default_storage_location_uri(self) -> str | None: ...
    @default_storage_location_uri.setter
    def default_storage_location_uri(self, value: str | None): ...
    @property
    def parameters(self) -> dict[str, Any] | None: ...
    @parameters.setter
    def parameters(self, value: dict[str, Any] | None): ...
    def to_api_repr(self) -> dict: ...
    @classmethod
    def from_api_repr(cls, api_repr: dict) -> ExternalCatalogDatasetOptions: ...

class ExternalCatalogTableOptions:
    def __init__(
        self,
        connection_id: str | None = None,
        parameters: dict[str, Any] | None = None,
        storage_descriptor: schema.StorageDescriptor | None = None,
    ) -> None: ...
    @property
    def connection_id(self) -> str | None: ...
    @connection_id.setter
    def connection_id(self, value: str | None): ...
    @property
    def parameters(self) -> dict[str, Any] | None: ...
    @parameters.setter
    def parameters(self, value: dict[str, Any] | None): ...
    @property
    def storage_descriptor(self) -> Any: ...
    @storage_descriptor.setter
    def storage_descriptor(self, value: schema.StorageDescriptor | dict | None): ...
    def to_api_repr(self) -> dict: ...
    @classmethod
    def from_api_repr(cls, api_repr: dict) -> ExternalCatalogTableOptions: ...
