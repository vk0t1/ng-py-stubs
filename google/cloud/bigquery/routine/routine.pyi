from typing import Any

from _typeshed import Incomplete
from google.cloud.bigquery.standard_sql import StandardSqlDataType as StandardSqlDataType
from google.cloud.bigquery.standard_sql import StandardSqlTableType as StandardSqlTableType

class RoutineType:
    ROUTINE_TYPE_UNSPECIFIED: str
    SCALAR_FUNCTION: str
    PROCEDURE: str
    TABLE_VALUED_FUNCTION: str

class Routine:
    def __init__(self, routine_ref, **kwargs) -> None: ...
    @property
    def reference(self): ...
    @property
    def path(self): ...
    @property
    def project(self): ...
    @property
    def dataset_id(self): ...
    @property
    def routine_id(self): ...
    @property
    def etag(self): ...
    @property
    def type_(self): ...
    @type_.setter
    def type_(self, value) -> None: ...
    @property
    def created(self): ...
    @property
    def modified(self): ...
    @property
    def language(self): ...
    @language.setter
    def language(self, value) -> None: ...
    @property
    def arguments(self): ...
    @arguments.setter
    def arguments(self, value) -> None: ...
    @property
    def return_type(self): ...
    @return_type.setter
    def return_type(self, value: StandardSqlDataType): ...
    @property
    def return_table_type(self) -> StandardSqlTableType | Any | None: ...
    @return_table_type.setter
    def return_table_type(self, value: StandardSqlTableType | None): ...
    @property
    def imported_libraries(self): ...
    @imported_libraries.setter
    def imported_libraries(self, value) -> None: ...
    @property
    def body(self): ...
    @body.setter
    def body(self, value) -> None: ...
    @property
    def description(self): ...
    @description.setter
    def description(self, value) -> None: ...
    @property
    def determinism_level(self): ...
    @determinism_level.setter
    def determinism_level(self, value) -> None: ...
    @property
    def remote_function_options(self): ...
    @remote_function_options.setter
    def remote_function_options(self, value) -> None: ...
    @property
    def data_governance_type(self): ...
    @data_governance_type.setter
    def data_governance_type(self, value) -> None: ...
    @classmethod
    def from_api_repr(cls, resource: dict) -> Routine: ...
    def to_api_repr(self) -> dict: ...

class RoutineArgument:
    def __init__(self, **kwargs) -> None: ...
    @property
    def name(self): ...
    @name.setter
    def name(self, value) -> None: ...
    @property
    def kind(self): ...
    @kind.setter
    def kind(self, value) -> None: ...
    @property
    def mode(self): ...
    @mode.setter
    def mode(self, value) -> None: ...
    @property
    def data_type(self): ...
    @data_type.setter
    def data_type(self, value) -> None: ...
    @classmethod
    def from_api_repr(cls, resource: dict) -> RoutineArgument: ...
    def to_api_repr(self) -> dict: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class RoutineReference:
    def __init__(self) -> None: ...
    @property
    def project(self): ...
    @property
    def dataset_id(self): ...
    @property
    def routine_id(self): ...
    @property
    def path(self): ...
    @classmethod
    def from_api_repr(cls, resource: dict) -> RoutineReference: ...
    @classmethod
    def from_string(cls, routine_id: str, default_project: str | None = None) -> RoutineReference: ...
    def to_api_repr(self) -> dict: ...
    def __eq__(self, other): ...
    def __hash__(self): ...
    def __ne__(self, other): ...

class RemoteFunctionOptions:
    def __init__(
        self,
        endpoint: Incomplete | None = None,
        connection: Incomplete | None = None,
        max_batching_rows: Incomplete | None = None,
        user_defined_context: Incomplete | None = None,
        _properties: Incomplete | None = None,
    ) -> None: ...
    @property
    def connection(self): ...
    @connection.setter
    def connection(self, value) -> None: ...
    @property
    def endpoint(self): ...
    @endpoint.setter
    def endpoint(self, value) -> None: ...
    @property
    def max_batching_rows(self): ...
    @max_batching_rows.setter
    def max_batching_rows(self, value) -> None: ...
    @property
    def user_defined_context(self): ...
    @user_defined_context.setter
    def user_defined_context(self, value) -> None: ...
    @classmethod
    def from_api_repr(cls, resource: dict) -> RemoteFunctionOptions: ...
    def to_api_repr(self) -> dict: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
