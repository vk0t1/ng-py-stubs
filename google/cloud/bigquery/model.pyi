import datetime
from typing import Any, Sequence

from google.cloud.bigquery import standard_sql as standard_sql
from google.cloud.bigquery.encryption_configuration import EncryptionConfiguration as EncryptionConfiguration

class Model:
    def __init__(self, model_ref: ModelReference | str | None) -> None: ...
    @property
    def reference(self) -> ModelReference | None: ...
    @property
    def project(self) -> str | None: ...
    @property
    def dataset_id(self) -> str | None: ...
    @property
    def model_id(self) -> str | None: ...
    @property
    def path(self) -> str | None: ...
    @property
    def location(self) -> str | None: ...
    @property
    def etag(self) -> str | None: ...
    @property
    def created(self) -> datetime.datetime | None: ...
    @property
    def modified(self) -> datetime.datetime | None: ...
    @property
    def model_type(self) -> str: ...
    @property
    def training_runs(self) -> Sequence[dict[str, Any]]: ...
    @property
    def feature_columns(self) -> Sequence[standard_sql.StandardSqlField]: ...
    @property
    def transform_columns(self) -> Sequence[TransformColumn]: ...
    @property
    def label_columns(self) -> Sequence[standard_sql.StandardSqlField]: ...
    @property
    def best_trial_id(self) -> int | None: ...
    @property
    def expires(self) -> datetime.datetime | None: ...
    @expires.setter
    def expires(self, value: datetime.datetime | None): ...
    @property
    def description(self) -> str | None: ...
    @description.setter
    def description(self, value: str | None): ...
    @property
    def friendly_name(self) -> str | None: ...
    @friendly_name.setter
    def friendly_name(self, value: str | None): ...
    @property
    def labels(self) -> dict[str, str]: ...
    @labels.setter
    def labels(self, value: dict[str, str] | None): ...
    @property
    def encryption_configuration(self) -> EncryptionConfiguration | None: ...
    @encryption_configuration.setter
    def encryption_configuration(self, value: EncryptionConfiguration | None): ...
    @classmethod
    def from_api_repr(cls, resource: dict[str, Any]) -> Model: ...
    def to_api_repr(self) -> dict[str, Any]: ...

class ModelReference:
    def __init__(self) -> None: ...
    @property
    def project(self): ...
    @property
    def dataset_id(self): ...
    @property
    def model_id(self): ...
    @property
    def path(self) -> str: ...
    @classmethod
    def from_api_repr(cls, resource: dict[str, Any]) -> ModelReference: ...
    @classmethod
    def from_string(cls, model_id: str, default_project: str | None = None) -> ModelReference: ...
    def to_api_repr(self) -> dict[str, Any]: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __hash__(self): ...

class TransformColumn:
    def __init__(self, resource: dict[str, Any]) -> None: ...
    @property
    def name(self) -> str | None: ...
    @property
    def type_(self) -> standard_sql.StandardSqlDataType | None: ...
    @property
    def transform_sql(self) -> str | None: ...
    @classmethod
    def from_api_repr(cls, resource: dict[str, Any]) -> TransformColumn: ...
