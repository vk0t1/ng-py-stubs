from _typeshed import Incomplete
from google.cloud.bigquery import external_config as external_config
from google.cloud.bigquery.encryption_configuration import EncryptionConfiguration as EncryptionConfiguration
from google.cloud.bigquery.model import ModelReference as ModelReference
from google.cloud.bigquery.routine import Routine as Routine, RoutineReference as RoutineReference
from google.cloud.bigquery.table import Table as Table, TableReference as TableReference
from typing import Any

class DatasetReference:
    def __init__(self, project: str, dataset_id: str) -> None: ...
    @property
    def project(self): ...
    @property
    def dataset_id(self): ...
    @property
    def path(self): ...
    table: Incomplete
    model: Incomplete
    routine: Incomplete
    @classmethod
    def from_api_repr(cls, resource: dict) -> DatasetReference: ...
    @classmethod
    def from_string(cls, dataset_id: str, default_project: str | None = None) -> DatasetReference: ...
    def to_api_repr(self) -> dict: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __hash__(self): ...

class AccessEntry:
    def __init__(self, role: str | None = None, entity_type: str | None = None, entity_id: dict[str, Any] | str | None = None) -> None: ...
    @property
    def role(self) -> str | None: ...
    @role.setter
    def role(self, value) -> None: ...
    @property
    def dataset(self) -> DatasetReference | None: ...
    @dataset.setter
    def dataset(self, value) -> None: ...
    @property
    def dataset_target_types(self) -> list[str] | None: ...
    @dataset_target_types.setter
    def dataset_target_types(self, value) -> None: ...
    @property
    def routine(self) -> RoutineReference | None: ...
    @routine.setter
    def routine(self, value) -> None: ...
    @property
    def view(self) -> TableReference | None: ...
    @view.setter
    def view(self, value) -> None: ...
    @property
    def group_by_email(self) -> str | None: ...
    @group_by_email.setter
    def group_by_email(self, value) -> None: ...
    @property
    def user_by_email(self) -> str | None: ...
    @user_by_email.setter
    def user_by_email(self, value) -> None: ...
    @property
    def domain(self) -> str | None: ...
    @domain.setter
    def domain(self, value) -> None: ...
    @property
    def special_group(self) -> str | None: ...
    @special_group.setter
    def special_group(self, value) -> None: ...
    @property
    def entity_type(self) -> str | None: ...
    @property
    def entity_id(self) -> dict[str, Any] | str | None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __hash__(self): ...
    def to_api_repr(self): ...
    @classmethod
    def from_api_repr(cls, resource: dict) -> AccessEntry: ...

class Dataset:
    def __init__(self, dataset_ref) -> None: ...
    @property
    def max_time_travel_hours(self): ...
    @max_time_travel_hours.setter
    def max_time_travel_hours(self, hours) -> None: ...
    @property
    def default_rounding_mode(self): ...
    @default_rounding_mode.setter
    def default_rounding_mode(self, value) -> None: ...
    @property
    def project(self): ...
    @property
    def path(self): ...
    @property
    def access_entries(self): ...
    @access_entries.setter
    def access_entries(self, value) -> None: ...
    @property
    def created(self): ...
    @property
    def dataset_id(self): ...
    @property
    def full_dataset_id(self): ...
    @property
    def reference(self): ...
    @property
    def etag(self): ...
    @property
    def modified(self): ...
    @property
    def self_link(self): ...
    @property
    def default_partition_expiration_ms(self): ...
    @default_partition_expiration_ms.setter
    def default_partition_expiration_ms(self, value) -> None: ...
    @property
    def default_table_expiration_ms(self): ...
    @default_table_expiration_ms.setter
    def default_table_expiration_ms(self, value) -> None: ...
    @property
    def description(self): ...
    @description.setter
    def description(self, value) -> None: ...
    @property
    def friendly_name(self): ...
    @friendly_name.setter
    def friendly_name(self, value) -> None: ...
    @property
    def location(self): ...
    @location.setter
    def location(self, value) -> None: ...
    @property
    def labels(self): ...
    @labels.setter
    def labels(self, value) -> None: ...
    @property
    def resource_tags(self): ...
    @resource_tags.setter
    def resource_tags(self, value) -> None: ...
    @property
    def default_encryption_configuration(self): ...
    @default_encryption_configuration.setter
    def default_encryption_configuration(self, value) -> None: ...
    @property
    def is_case_insensitive(self): ...
    @is_case_insensitive.setter
    def is_case_insensitive(self, value) -> None: ...
    @property
    def storage_billing_model(self): ...
    @storage_billing_model.setter
    def storage_billing_model(self, value) -> None: ...
    @property
    def external_catalog_dataset_options(self): ...
    @external_catalog_dataset_options.setter
    def external_catalog_dataset_options(self, value) -> None: ...
    @classmethod
    def from_string(cls, full_dataset_id: str) -> Dataset: ...
    @classmethod
    def from_api_repr(cls, resource: dict) -> Dataset: ...
    def to_api_repr(self) -> dict: ...
    table: Incomplete
    model: Incomplete
    routine: Incomplete

class DatasetListItem:
    def __init__(self, resource) -> None: ...
    @property
    def project(self): ...
    @property
    def dataset_id(self): ...
    @property
    def full_dataset_id(self): ...
    @property
    def friendly_name(self): ...
    @property
    def labels(self): ...
    @property
    def reference(self): ...
    table: Incomplete
    model: Incomplete
    routine: Incomplete
