from _typeshed import Incomplete
from google.cloud.storage._opentelemetry_tracing import create_trace_span as create_trace_span
from google.cloud.storage.retry import DEFAULT_RETRY as DEFAULT_RETRY, DEFAULT_RETRY_IF_METAGENERATION_SPECIFIED as DEFAULT_RETRY_IF_METAGENERATION_SPECIFIED

class _ACLEntity:
    READER_ROLE: str
    WRITER_ROLE: str
    OWNER_ROLE: str
    identifier: Incomplete
    roles: Incomplete
    type: Incomplete
    def __init__(self, entity_type, identifier: Incomplete | None = None) -> None: ...
    def get_roles(self): ...
    def grant(self, role) -> None: ...
    def revoke(self, role) -> None: ...
    def grant_read(self) -> None: ...
    def grant_write(self) -> None: ...
    def grant_owner(self) -> None: ...
    def revoke_read(self) -> None: ...
    def revoke_write(self) -> None: ...
    def revoke_owner(self) -> None: ...

class ACL:
    PREDEFINED_XML_ACLS: Incomplete
    PREDEFINED_JSON_ACLS: Incomplete
    loaded: bool
    reload_path: Incomplete
    save_path: Incomplete
    user_project: Incomplete
    entities: Incomplete
    def __init__(self) -> None: ...
    @classmethod
    def validate_predefined(cls, predefined): ...
    def reset(self) -> None: ...
    def __iter__(self): ...
    def entity_from_dict(self, entity_dict): ...
    def has_entity(self, entity): ...
    def get_entity(self, entity, default: Incomplete | None = None): ...
    def add_entity(self, entity) -> None: ...
    def entity(self, entity_type, identifier: Incomplete | None = None): ...
    def user(self, identifier): ...
    def group(self, identifier): ...
    def domain(self, domain): ...
    def all(self): ...
    def all_authenticated(self): ...
    def get_entities(self): ...
    @property
    def client(self) -> None: ...
    def reload(self, client: Incomplete | None = None, timeout=..., retry=...) -> None: ...
    def save(self, acl: Incomplete | None = None, client: Incomplete | None = None, if_generation_match: Incomplete | None = None, if_generation_not_match: Incomplete | None = None, if_metageneration_match: Incomplete | None = None, if_metageneration_not_match: Incomplete | None = None, timeout=..., retry=...) -> None: ...
    def save_predefined(self, predefined, client: Incomplete | None = None, if_generation_match: Incomplete | None = None, if_generation_not_match: Incomplete | None = None, if_metageneration_match: Incomplete | None = None, if_metageneration_not_match: Incomplete | None = None, timeout=..., retry=...) -> None: ...
    def clear(self, client: Incomplete | None = None, if_generation_match: Incomplete | None = None, if_generation_not_match: Incomplete | None = None, if_metageneration_match: Incomplete | None = None, if_metageneration_not_match: Incomplete | None = None, timeout=..., retry=...) -> None: ...

class BucketACL(ACL):
    bucket: Incomplete
    def __init__(self, bucket) -> None: ...
    @property
    def client(self): ...
    @property
    def reload_path(self): ...
    @property
    def save_path(self): ...
    @property
    def user_project(self): ...

class DefaultObjectACL(BucketACL): ...

class ObjectACL(ACL):
    blob: Incomplete
    def __init__(self, blob) -> None: ...
    @property
    def client(self): ...
    @property
    def reload_path(self): ...
    @property
    def save_path(self): ...
    @property
    def user_project(self): ...
    def save(self, acl: Incomplete | None = None, client: Incomplete | None = None, if_generation_match: Incomplete | None = None, if_generation_not_match: Incomplete | None = None, if_metageneration_match: Incomplete | None = None, if_metageneration_not_match: Incomplete | None = None, timeout=..., retry=...) -> None: ...
    def save_predefined(self, predefined, client: Incomplete | None = None, if_generation_match: Incomplete | None = None, if_generation_not_match: Incomplete | None = None, if_metageneration_match: Incomplete | None = None, if_metageneration_not_match: Incomplete | None = None, timeout=..., retry=...) -> None: ...
    def clear(self, client: Incomplete | None = None, if_generation_match: Incomplete | None = None, if_generation_not_match: Incomplete | None = None, if_metageneration_match: Incomplete | None = None, if_metageneration_not_match: Incomplete | None = None, timeout=..., retry=...) -> None: ...
