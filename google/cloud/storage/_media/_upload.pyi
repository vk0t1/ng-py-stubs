from _typeshed import Incomplete
from google.cloud.storage._media import UPLOAD_CHUNK_SIZE as UPLOAD_CHUNK_SIZE
from google.cloud.storage.exceptions import DataCorruption as DataCorruption
from google.cloud.storage.exceptions import InvalidResponse as InvalidResponse
from google.cloud.storage.retry import DEFAULT_RETRY as DEFAULT_RETRY

class UploadBase:
    upload_url: Incomplete
    def __init__(self, upload_url, headers: Incomplete | None = None, retry=...) -> None: ...
    @property
    def finished(self): ...

class SimpleUpload(UploadBase):
    def transmit(self, transport, data, content_type, timeout: Incomplete | None = None) -> None: ...

class MultipartUpload(UploadBase):
    def __init__(self, upload_url, headers: Incomplete | None = None, checksum: str = "auto", retry=...) -> None: ...
    def transmit(self, transport, data, metadata, content_type, timeout: Incomplete | None = None) -> None: ...

class ResumableUpload(UploadBase):
    def __init__(
        self, upload_url, chunk_size, checksum: str = "auto", headers: Incomplete | None = None, retry=...
    ) -> None: ...
    @property
    def invalid(self): ...
    @property
    def chunk_size(self): ...
    @property
    def resumable_url(self): ...
    @property
    def bytes_uploaded(self): ...
    @property
    def total_bytes(self): ...
    def initiate(
        self,
        transport,
        stream,
        metadata,
        content_type,
        total_bytes: Incomplete | None = None,
        stream_final: bool = True,
        timeout: Incomplete | None = None,
    ) -> None: ...
    def transmit_next_chunk(self, transport, timeout: Incomplete | None = None) -> None: ...
    def recover(self, transport) -> None: ...

class XMLMPUContainer(UploadBase):
    def __init__(
        self, upload_url, filename, headers: Incomplete | None = None, upload_id: Incomplete | None = None, retry=...
    ) -> None: ...
    @property
    def upload_id(self): ...
    def register_part(self, part_number, etag) -> None: ...
    def initiate(self, transport, content_type, timeout: Incomplete | None = None) -> None: ...
    def finalize(self, transport, timeout: Incomplete | None = None) -> None: ...
    def cancel(self, transport, timeout: Incomplete | None = None) -> None: ...

class XMLMPUPart(UploadBase):
    def __init__(
        self,
        upload_url,
        upload_id,
        filename,
        start,
        end,
        part_number,
        headers: Incomplete | None = None,
        checksum: str = "auto",
        retry=...,
    ) -> None: ...
    @property
    def part_number(self): ...
    @property
    def upload_id(self): ...
    @property
    def filename(self): ...
    @property
    def etag(self): ...
    @property
    def start(self): ...
    @property
    def end(self): ...
    def upload(self, transport, timeout: Incomplete | None = None) -> None: ...

def get_boundary(): ...
def construct_multipart_request(data, metadata, content_type): ...
def get_total_bytes(stream): ...
def get_next_chunk(stream, chunk_size, total_bytes): ...
def get_content_range(start_byte, end_byte, total_bytes): ...
