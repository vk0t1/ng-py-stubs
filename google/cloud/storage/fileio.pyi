import io
from _typeshed import Incomplete
from google.api_core.exceptions import RequestRangeNotSatisfiable as RequestRangeNotSatisfiable
from google.cloud.storage.retry import ConditionalRetryPolicy as ConditionalRetryPolicy, DEFAULT_RETRY as DEFAULT_RETRY

CHUNK_SIZE_MULTIPLE: Incomplete
DEFAULT_CHUNK_SIZE: Incomplete
VALID_DOWNLOAD_KWARGS: Incomplete
VALID_UPLOAD_KWARGS: Incomplete

class BlobReader(io.BufferedIOBase):
    def __init__(self, blob, chunk_size: Incomplete | None = None, retry=..., **download_kwargs) -> None: ...
    def read(self, size: int = -1): ...
    def read1(self, size: int = -1): ...
    def seek(self, pos, whence: int = 0): ...
    def close(self) -> None: ...
    @property
    def closed(self): ...
    def readable(self): ...
    def writable(self): ...
    def seekable(self): ...

class BlobWriter(io.BufferedIOBase):
    def __init__(self, blob, chunk_size: Incomplete | None = None, ignore_flush: bool = False, retry=..., **upload_kwargs) -> None: ...
    def write(self, b): ...
    def tell(self): ...
    def flush(self) -> None: ...
    def close(self) -> None: ...
    def terminate(self) -> None: ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_val: BaseException | None, exc_tb: types.TracebackType | None) -> None: ...
    @property
    def closed(self): ...
    def readable(self): ...
    def writable(self): ...
    def seekable(self): ...

class SlidingBuffer:
    def __init__(self) -> None: ...
    def write(self, b): ...
    def read(self, size: int = -1): ...
    def flush(self) -> None: ...
    def tell(self): ...
    def seek(self, pos): ...
    def __len__(self) -> int: ...
    def close(self): ...
    @property
    def closed(self): ...
