from _typeshed import Incomplete

from . import _api_module
from . import types as types
from ._api_client import BaseApiClient as BaseApiClient
from .pagers import AsyncPager as AsyncPager
from .pagers import Pager as Pager

logger: Incomplete

class Batches(_api_module.BaseModule):
    def get(self, *, name: str, config: types.GetBatchJobConfigOrDict | None = None) -> types.BatchJob: ...
    def cancel(self, *, name: str, config: types.CancelBatchJobConfigOrDict | None = None) -> None: ...
    def delete(
        self, *, name: str, config: types.DeleteBatchJobConfigOrDict | None = None
    ) -> types.DeleteResourceJob: ...
    def create(
        self, *, model: str, src: str, config: types.CreateBatchJobConfigOrDict | None = None
    ) -> types.BatchJob: ...
    def list(self, *, config: types.ListBatchJobsConfigOrDict | None = None) -> Pager[types.BatchJob]: ...

class AsyncBatches(_api_module.BaseModule):
    async def get(self, *, name: str, config: types.GetBatchJobConfigOrDict | None = None) -> types.BatchJob: ...
    async def cancel(self, *, name: str, config: types.CancelBatchJobConfigOrDict | None = None) -> None: ...
    async def delete(
        self, *, name: str, config: types.DeleteBatchJobConfigOrDict | None = None
    ) -> types.DeleteResourceJob: ...
    async def create(
        self, *, model: str, src: str, config: types.CreateBatchJobConfigOrDict | None = None
    ) -> types.BatchJob: ...
    async def list(self, *, config: types.ListBatchJobsConfigOrDict | None = None) -> AsyncPager[types.BatchJob]: ...
