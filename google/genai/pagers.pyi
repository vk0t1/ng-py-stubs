from _typeshed import Incomplete
from typing import Any, AsyncIterator, Awaitable, Callable, Generic, Iterator, TypeVar

T = TypeVar('T')
PagedItem: Incomplete

class _BasePager(Generic[T]):
    def __init__(self, name: PagedItem, request: Callable[..., Any], response: Any, config: Any) -> None: ...
    @property
    def page(self) -> list[T]: ...
    @property
    def name(self) -> PagedItem: ...
    @property
    def page_size(self) -> int: ...
    @property
    def config(self) -> dict[str, Any]: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> T: ...

class Pager(_BasePager[T]):
    def __next__(self) -> T: ...
    def __iter__(self) -> Iterator[T]: ...
    def next_page(self) -> list[T]: ...

class AsyncPager(_BasePager[T]):
    def __init__(self, name: PagedItem, request: Callable[..., Awaitable[Any]], response: Any, config: Any) -> None: ...
    def __aiter__(self) -> AsyncIterator[T]: ...
    async def __anext__(self) -> T: ...
    async def next_page(self) -> list[T]: ...
