from . import types as types
from .models import AsyncModels as AsyncModels, Models as Models
from .types import Content as Content, ContentOrDict as ContentOrDict, GenerateContentConfigOrDict as GenerateContentConfigOrDict, GenerateContentResponse as GenerateContentResponse, Part as Part, PartUnionDict as PartUnionDict
from typing import AsyncIterator, Awaitable

class _BaseChat:
    def __init__(self, *, model: str, config: GenerateContentConfigOrDict | None = None, history: list[ContentOrDict]) -> None: ...
    def record_history(self, user_input: Content, model_output: list[Content], automatic_function_calling_history: list[Content], is_valid: bool): ...
    def get_history(self, curated: bool = False) -> list[Content]: ...

class Chat(_BaseChat):
    def __init__(self, *, modules: Models, model: str, config: GenerateContentConfigOrDict | None = None, history: list[ContentOrDict]) -> None: ...
    def send_message(self, message: list[PartUnionDict] | PartUnionDict, config: GenerateContentConfigOrDict | None = None) -> GenerateContentResponse: ...
    def send_message_stream(self, message: list[PartUnionDict] | PartUnionDict, config: GenerateContentConfigOrDict | None = None): ...

class Chats:
    def __init__(self, modules: Models) -> None: ...
    def create(self, *, model: str, config: GenerateContentConfigOrDict | None = None, history: list[ContentOrDict] | None = None) -> Chat: ...

class AsyncChat(_BaseChat):
    def __init__(self, *, modules: AsyncModels, model: str, config: GenerateContentConfigOrDict | None = None, history: list[ContentOrDict]) -> None: ...
    async def send_message(self, message: list[PartUnionDict] | PartUnionDict, config: GenerateContentConfigOrDict | None = None) -> GenerateContentResponse: ...
    async def send_message_stream(self, message: list[PartUnionDict] | PartUnionDict, config: GenerateContentConfigOrDict | None = None) -> Awaitable[AsyncIterator[GenerateContentResponse]]: ...

class AsyncChats:
    def __init__(self, modules: AsyncModels) -> None: ...
    def create(self, *, model: str, config: GenerateContentConfigOrDict | None = None, history: list[ContentOrDict] | None = None) -> AsyncChat: ...
