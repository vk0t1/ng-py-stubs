from . import errors as errors, types as types
from _typeshed import Incomplete
from typing import Any, Callable

logger: Incomplete

def format_destination(src: str, config: types.CreateBatchJobConfigOrDict | None = None) -> types.CreateBatchJobConfig: ...
def get_function_map(config: types.GenerateContentConfigOrDict | None = None) -> dict[str, Callable]: ...
def convert_number_values_for_dict_function_call_args(args: dict[str, Any]) -> dict[str, Any]: ...
def convert_number_values_for_function_call_args(args: dict[str, object] | list[object] | object) -> dict[str, object] | list[object] | object: ...
def is_annotation_pydantic_model(annotation: Any) -> bool: ...
def convert_if_exist_pydantic_model(value: Any, annotation: Any, param_name: str, func_name: str) -> Any: ...
def invoke_function_from_dict_args(args: dict[str, Any], function_to_invoke: Callable) -> Any: ...
def get_function_response_parts(response: types.GenerateContentResponse, function_map: dict[str, Callable]) -> list[types.Part]: ...
def should_disable_afc(config: types.GenerateContentConfigOrDict | None = None) -> bool: ...
def get_max_remote_calls_afc(config: types.GenerateContentConfigOrDict | None = None) -> int: ...
def should_append_afc_history(config: types.GenerateContentConfigOrDict | None = None) -> bool: ...
