# mypy: ignore-errors

import enum
import typing
from typing import Any

import pydantic
from _typeshed import Incomplete

from . import errors as errors

def set_value_by_path(data, keys, value) -> None: ...
def get_value_by_path(data: Any, keys: list[str]): ...
def convert_to_dict(obj: object) -> Any: ...

T = typing.TypeVar("T", bound="BaseModel")

class BaseModel(pydantic.BaseModel):
    model_config: Incomplete
    def to_json_dict(self) -> dict[str, object]: ...

class CaseInSensitiveEnum(str, enum.Enum): ...

def timestamped_unique_name() -> str: ...
def encode_unserializable_types(data: dict[str, object]) -> dict[str, object]: ...
def experimental_warning(message: str): ...
