import httpx
import typing
from .http_client import AsyncHttpClient as AsyncHttpClient, HttpClient as HttpClient
from _typeshed import Incomplete

class BaseClientWrapper:
    def __init__(self, *, x_langfuse_sdk_name: str | None = None, x_langfuse_sdk_version: str | None = None, x_langfuse_public_key: str | None = None, username: str | typing.Callable[[], str] | None = None, password: str | typing.Callable[[], str] | None = None, base_url: str, timeout: float | None = None) -> None: ...
    def get_headers(self) -> dict[str, str]: ...
    def get_base_url(self) -> str: ...
    def get_timeout(self) -> float | None: ...

class SyncClientWrapper(BaseClientWrapper):
    httpx_client: Incomplete
    def __init__(self, *, x_langfuse_sdk_name: str | None = None, x_langfuse_sdk_version: str | None = None, x_langfuse_public_key: str | None = None, username: str | typing.Callable[[], str] | None = None, password: str | typing.Callable[[], str] | None = None, base_url: str, timeout: float | None = None, httpx_client: httpx.Client) -> None: ...

class AsyncClientWrapper(BaseClientWrapper):
    httpx_client: Incomplete
    def __init__(self, *, x_langfuse_sdk_name: str | None = None, x_langfuse_sdk_version: str | None = None, x_langfuse_public_key: str | None = None, username: str | typing.Callable[[], str] | None = None, password: str | typing.Callable[[], str] | None = None, base_url: str, timeout: float | None = None, httpx_client: httpx.AsyncClient) -> None: ...
